SHELL := bash

# Directory, where all required tools are located (absolute path required)
TOOLS_DIR ?= $(shell cd tools && pwd)

# Prerequisite tools
GO ?= go
DOCKER ?= docker
KUBECTL ?= kubectl

# Tools managed by this project
GINKGO ?= $(TOOLS_DIR)/ginkgo
LINTER ?= $(TOOLS_DIR)/golangci-lint
KIND ?= $(TOOLS_DIR)/kind
GOVERALLS ?= $(TOOLS_DIR)/goveralls
GOVER ?= $(TOOLS_DIR)/gover
HELM3 ?= $(TOOLS_DIR)/helm3
VAULT ?= $(TOOLS_DIR)/vault
CONTROLLER_GEN ?= $(TOOLS_DIR)/controller-gen
KUSTOMIZE ?= $(TOOLS_DIR)/kustomize
KUBEBUILDER ?= $(TOOLS_DIR)/kubebuilder
KUBEBUILDER_ASSETS ?= $(TOOLS_DIR)

# Variables
MANAGER_BIN ?= bin/manager

HELM_CHART_NAME ?= vault-operator
HELM_CHART_DIR ?= charts/$(HELM_CHART_NAME)
HELM_RELEASE_NAME ?= dev-vault-operator
HELM_NAMESPACE ?= default

export

.PHONY: all test lint fmt vet install uninstall deploy manifests

all: $(MANAGER_BIN)

$(MANAGER_BIN): generate fmt vet
	$(GO) build -o $(MANAGER_BIN) ./main.go

test: generate fmt vet manifests $(GINKGO) $(KUBEBUILDER) $(VAULT)
	$(GINKGO) -r -v -cover ./...

# First run gover to merge the coverprofiles and upload to coveralls
coverage: $(GOVERALLS) $(GOVER)
	$(GOVER)
	# $(GOVERALLS) -coverprofile=gover.coverprofile -service=travis-ci -repotoken $(COVERALLS_TOKEN)

go-lint: 
	$(GO) mod verify
	$(LINTER) run -v --no-config --deadline=5m

lint: $(LINTER) helm-lint go-lint

fmt:
	$(GO) fmt ./...

vet:
	$(GO) vet ./...


# Generate manifests e.g. CRD, RBAC etc.
manifests: $(CONTROLLER_GEN) $(KUSTOMIZE)
	$(CONTROLLER_GEN) crd:trivialVersions=false rbac:roleName=manager-role webhook paths="./..." output:crd:artifacts:config=config/crd/bases
	echo -e "# Generated by 'make manifests'\n" > $(HELM_CHART_DIR)/templates/crds.yaml
	$(KUSTOMIZE) build config/crd-templates >> $(HELM_CHART_DIR)/templates/crds.yaml
	echo -e "# Generated by 'make manifests'\n" > $(HELM_CHART_DIR)/templates/rbac.yaml
	$(KUSTOMIZE) build config/rbac-templates >> $(HELM_CHART_DIR)/templates/rbac.yaml
	echo -e "# Generated by 'make manifests'\n" > $(HELM_CHART_DIR)/templates/webhook.yaml
	$(KUSTOMIZE) build config/webhook-templates >> $(HELM_CHART_DIR)/templates/webhook.yaml


# Generate code using controller-gen
generate: $(CONTROLLER_GEN)
	$(CONTROLLER_GEN) object:headerFile="hack/boilerplate.go.txt" paths="./..."

helm-install: $(HELM3)
	$(HELM3) upgrade --install $(HELM_RELEASE_NAME) --namespace $(HELM_NAMESPACE) $(HELM_CHART_DIR)

helm-uninstall: $(HELM3)
	$(HELM3) uninstall --namespace $(HELM_NAMESPACE) $(HELM_RELEASE_NAME)

helm-lint: $(HELM3)
	$(HELM3) lint $(HELM_CHART_DIR)

# Phony target to install all required tools into ${TOOLS_DIR}
tools: $(TOOLS_DIR)/kind $(TOOLS_DIR)/ginkgo $(TOOLS_DIR)/controller-gen $(TOOLS_DIR)/kustomize $(TOOLS_DIR)/golangci-lint $(TOOLS_DIR)/kubebuilder $(TOOLS_DIR)/helm3 $(TOOLS_DIR)/goveralls $(TOOLS_DIR)/gover

$(TOOLS_DIR)/kind:
	@echo "Installing $@"
	$(shell GOBIN=$(TOOLS_DIR) $(GO) install sigs.k8s.io/kind@v0.7.0)

$(TOOLS_DIR)/ginkgo:
	@echo "Installing $@"
	$(shell GOBIN=$(TOOLS_DIR) $(GO) install github.com/onsi/ginkgo/ginkgo@v1.16.4)

$(TOOLS_DIR)/controller-gen:
	@echo "Installing $@"
	$(shell GOBIN=$(TOOLS_DIR) $(GO) install sigs.k8s.io/controller-tools/cmd/controller-gen@v0.2.5)

$(TOOLS_DIR)/goveralls:
	@echo "Installing $@"
	$(shell GOBIN=$(TOOLS_DIR) $(GO) install github.com/mattn/goveralls@v0.0.9)

$(TOOLS_DIR)/gover:
	@echo "Installing $@"
	$(shell GOBIN=$(TOOLS_DIR) $(GO) install github.com/modocache/gover@latest)

$(TOOLS_DIR)/kustomize:
	@echo "Installing $@"
	$(shell curl -sSfL "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash -s -- 3.5.5 $(TOOLS_DIR) > /dev/null)

$(TOOLS_DIR)/golangci-lint:
	@echo "Installing $@"
	$(shell curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(TOOLS_DIR) v1.42.1)

$(TOOLS_DIR)/kubebuilder $(TOOLS_DIR)/kubectl $(TOOLS_DIR)/kube-apiserver $(TOOLS_DIR)/etcd:
	$(shell $(TOOLS_DIR)/kubebuilder-install)

$(TOOLS_DIR)/helm3:
	$(shell $(TOOLS_DIR)/helm3-install)

$(TOOLS_DIR)/vault:
	 bash $(TOOLS_DIR)/vault-install
